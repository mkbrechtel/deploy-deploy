create a test with a an epic fail based on the successful deploy@test test deploy script. it shall be called deploy@failed
create an executable python-script called **files/deploy.py**. it is supposed to start a systemd deploy service and then stream the log of it's invocation to stdout. when the invocation run is finished it should stop. use the systemd.journal module to poll the journal. the script shall take one arg with the instance id, e.g. `./deploy.py test`. Keep it simple and don't make it too complex. then run it with the test deploy service with `sudo ./deploy.py test`. look at what the test deploy service is supposed to output (last line is "kthxbye"). Make sure it works as expected. After it works, add this script to the deploy_deploy ansible role and run the test-system.yaml playbook to make sure the installation works. Determine the unit state only by using the journal messages, do not run subcommands regularily. Before creating the actual program, create a test program that shows you the available journal information. Also the program should check if the unit is currently running by attaching to the journal and when it is started, it should wait for it to finish and then start the deploy unit.
